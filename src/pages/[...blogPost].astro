---
import { type CollectionEntry, getCollection } from 'astro:content'
import BlogPost from '@/layouts/BlogPost'
import Code from '@/components/mdx/Code'
import ListRelatedPosts from '@/components/ListRelatedPosts'
import Share from '@/components/Share'
import TableOfContents from '@/components/TableOfContents'
import { getRelatedPosts } from '@/utils'
import SButton from '@/components/mdx/SButton'
import Disqus from '@/components/Disqus'
import { disqusConfig } from '@/data/disqus.config'

import { locales } from '../i18n/i18n'
import { getLocaleFromUrl } from '../i18n/utilities'
// import Post from '@/layouts/Post.astro';
import { getRelativePostPath } from '../utilities/getPostPath'
import getPublishedPosts from '../utilities/getPublishedPosts'

export async function getStaticPaths() {
	const collection = 'blog'
	const posts = await getPublishedPosts('', collection, '')
	let postsToRender = []

	for (let locale of locales) {
		const localePosts = posts
			.filter(function (entry) {
				return getLocaleFromUrl(entry.slug) === locale
			});
			const FinalPosts=localePosts.map((post) => {
				const relatedPost = getRelatedPosts(post, getLocaleFromUrl(post.slug), localePosts) // Assuming getRelatedPosts() returns the related post object
				post.data.relatedPosts=relatedPost;
				return {
					params: { blogPost: `${getRelativePostPath(locale, collection, post.slug, false)}` },
					props: post

				}
			})
		postsToRender.push(...FinalPosts)
	}
	return postsToRender
}
type Props = CollectionEntry<'blog'>

const post = Astro.props;
const params = Astro.params
// console.log()
console.log('params', params.blogPost)

const relatedPosts = post.data.relatedPosts;

const disqusEnabled = disqusConfig.enabled

const { Content, headings, remarkPluginFrontmatter } = await post.render()
// post.data.description = 'getPostDescription(post)'
---

<BlogPost
	id={post.id}
	data={post.data}
	headings={headings}
	readTime={remarkPluginFrontmatter.minutesRead}
>
	<div class='grid grid-cols-1 md:grid-cols-[20%_auto] gap-10 mt-8'>
		<!-- aside  -->
		<aside class='md:flex flex-col gap-8 hidden'>
			<Share />
			<div class='sticky top-24 self-start hidden md:block transition-all duration-200'>
				{headings && headings.length > 0 && <TableOfContents {headings} />}
			</div>
		</aside>

		<!-- post -->
		<article class='max-w-full w-full'>
			<div class='prose prose-lg md:prose-xl dark:prose-invert mb-12 min-w-full'>
				<Content components={{ pre: Code, SButton }} />
			</div>

			<!-- related posts -->
			<footer>
				<h2 class='font-bold text-lg dark:text-white mb-6'>Related Posts</h2>
				<ListRelatedPosts posts={relatedPosts} />
			</footer>
		</article>
	</div>

	{disqusEnabled && <Disqus />}
</BlogPost>
